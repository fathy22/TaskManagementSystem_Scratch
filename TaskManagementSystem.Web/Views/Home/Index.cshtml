@model TaskManagementSystem.Web.Models.DashboardViewModel
@{
    ViewData["Title"] = "Home Page";
}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">User Count</h5>
                    <p class="card-text">@Model.Report.UsersCount</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">Teams Count</h5>
                    <p class="card-text">@Model.Report.TeamsCount</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">All Tasks Count</h5>
                    <p class="card-text">@Model.Report.AllTasksCount</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">Completed Tasks Count</h5>
                    <p class="card-text">@Model.Report.CompletedTasksCount</p>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Tasks Status</h5>
            @{
                var completedTasksPercentage = @Model.Report.AllTasksCount > 0 ? (double)@Model.Report.CompletedTasksCount / @Model.Report.AllTasksCount * 100 : 0;
                var toDoTasksPercentage = @Model.Report.AllTasksCount > 0 ? (double)@Model.Report.ToDoTasksCount / @Model.Report.AllTasksCount * 100 : 0;
                var inProgressTasksPercentage = @Model.Report.AllTasksCount > 0 ? (double)@Model.Report.InProgressTasksCount / @Model.Report.AllTasksCount * 100 : 0;
            }
            <div class="progress mb-3">
                <div class="progress-bar bg-primary" role="progressbar" style="width: @completedTasksPercentage%;" aria-valuenow="@completedTasksPercentage" aria-valuemin="0" aria-valuemax="100">
                    Completed Tasks @Model.Report.CompletedTasksCount/@Model.Report.AllTasksCount
                </div>
            </div>
            <div class="progress mb-3">
                <div class="progress-bar bg-danger" role="progressbar" style="width: @toDoTasksPercentage%;" aria-valuenow="@toDoTasksPercentage" aria-valuemin="0" aria-valuemax="100">
                    ToDo Tasks @Model.Report.ToDoTasksCount/@Model.Report.AllTasksCount
                </div>
            </div>
            <div class="progress mb-3">
                <div class="progress-bar bg-success" role="progressbar" style="width: @inProgressTasksPercentage%;" aria-valuenow="@inProgressTasksPercentage" aria-valuemin="0" aria-valuemax="100">
                    InProgress Tasks @Model.Report.InProgressTasksCount/@Model.Report.AllTasksCount
                </div>
            </div>
        </div>
    </div>

    <div class="card mt-4">
        <div class="card-body">
            <h5 class="card-title">Top Five Users Have Tasks</h5>
            <canvas id="topUsersChart" width="400" height="200"></canvas>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var topUsers = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TopFiveUsers));
    var userNames = topUsers.map(user => user.UserName);
    var taskCounts = topUsers.map(user => user.HisTasksCount);

    var ctx = document.getElementById('topUsersChart').getContext('2d');
    var topUsersChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: userNames,
            datasets: [{
                label: 'Tasks',
                data: taskCounts,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)'
                ],
                borderWidth: 1,
                maxBarThickness: 30
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                }
            }
        }
    });
</script>